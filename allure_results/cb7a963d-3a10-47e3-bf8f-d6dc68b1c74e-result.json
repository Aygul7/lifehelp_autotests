{"name": "test_back_account_package_order_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.046\n  (Session info: chrome=117.0.5938.134)\nStacktrace:\n\tGetHandleVerifier [0x00007FF793277892+54818]\n\t(No symbol) [0x00007FF7931E6AC2]\n\t(No symbol) [0x00007FF79309DA3B]\n\t(No symbol) [0x00007FF79308C06A]\n\t(No symbol) [0x00007FF79308BFB3]\n\t(No symbol) [0x00007FF79308A82E]\n\t(No symbol) [0x00007FF79308B2EE]\n\t(No symbol) [0x00007FF79309775B]\n\t(No symbol) [0x00007FF7930A84D1]\n\t(No symbol) [0x00007FF7930AC80A]\n\t(No symbol) [0x00007FF79308B937]\n\t(No symbol) [0x00007FF7930A83AA]\n\t(No symbol) [0x00007FF793117609]\n\t(No symbol) [0x00007FF7930FE883]\n\t(No symbol) [0x00007FF7930D3691]\n\t(No symbol) [0x00007FF7930D48D4]\n\tGetHandleVerifier [0x00007FF7935DB992+3610402]\n\tGetHandleVerifier [0x00007FF793631860+3962352]\n\tGetHandleVerifier [0x00007FF793629D4F+3930847]\n\tGetHandleVerifier [0x00007FF793313646+693206]\n\t(No symbol) [0x00007FF7931F1628]\n\t(No symbol) [0x00007FF7931ED934]\n\t(No symbol) [0x00007FF7931EDA62]\n\t(No symbol) [0x00007FF7931DE113]\n\tBaseThreadInitThunk [0x00007FFF50327344+20]\n\tRtlUserThreadStart [0x00007FFF513226B1+33]", "trace": "get_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1f94e7d9056f2a5029a0bf8fa7eea6bd\")>\n\n    @pytest.fixture\n    def setup(get_webdriver):\n        URL = 'https://life-help.ru/'\n>       get_webdriver.get(URL)\n\nconftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002358D51DCC0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...07FF7931DE113]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF50327344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF513226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.046\nE         (Session info: chrome=117.0.5938.134)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF793277892+54818]\nE       \t(No symbol) [0x00007FF7931E6AC2]\nE       \t(No symbol) [0x00007FF79309DA3B]\nE       \t(No symbol) [0x00007FF79308C06A]\nE       \t(No symbol) [0x00007FF79308BFB3]\nE       \t(No symbol) [0x00007FF79308A82E]\nE       \t(No symbol) [0x00007FF79308B2EE]\nE       \t(No symbol) [0x00007FF79309775B]\nE       \t(No symbol) [0x00007FF7930A84D1]\nE       \t(No symbol) [0x00007FF7930AC80A]\nE       \t(No symbol) [0x00007FF79308B937]\nE       \t(No symbol) [0x00007FF7930A83AA]\nE       \t(No symbol) [0x00007FF793117609]\nE       \t(No symbol) [0x00007FF7930FE883]\nE       \t(No symbol) [0x00007FF7930D3691]\nE       \t(No symbol) [0x00007FF7930D48D4]\nE       \tGetHandleVerifier [0x00007FF7935DB992+3610402]\nE       \tGetHandleVerifier [0x00007FF793631860+3962352]\nE       \tGetHandleVerifier [0x00007FF793629D4F+3930847]\nE       \tGetHandleVerifier [0x00007FF793313646+693206]\nE       \t(No symbol) [0x00007FF7931F1628]\nE       \t(No symbol) [0x00007FF7931ED934]\nE       \t(No symbol) [0x00007FF7931EDA62]\nE       \t(No symbol) [0x00007FF7931DE113]\nE       \tBaseThreadInitThunk [0x00007FFF50327344+20]\nE       \tRtlUserThreadStart [0x00007FFF513226B1+33]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: TimeoutException"}, "start": 1696403801486, "stop": 1696403801486, "uuid": "eb7e7568-32c6-4f72-b718-75c4bc836cc8", "historyId": "b5cd9e10ebcc18826d8d851b55d03504", "testCaseId": "6c9b35c0251ee7e13d51b748f4ba6715", "fullName": "tests.test_authorization#test_back_account_package_order_page", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_authorization"}, {"name": "host", "value": "DESKTOP-MNCDD93"}, {"name": "thread", "value": "11344-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_authorization"}]}