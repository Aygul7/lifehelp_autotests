{"name": "test_authorization[success_login_psychologist]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "authorization_page = <pages.authorization_page.AuthorizationPage object at 0x0000013842DF6110>, first = '89520476828', second = 'lifehelp1@'\nthird = 'https://life-help.ru/doctor/sessions'\n\n    @pytest.mark.parametrize('first, second, third', (case_1, case_2),\n                                 ids=['success_login_user', 'success_login_psychologist'])\n    def test_authorization(authorization_page, first, second, third):\n        #authorization_page.click_to_accept_cookies()\n        authorization_page.click_to_login_button()\n        authorization_page.click_to_login_w_password_button()\n>       authorization_page.set_email(first)\n\ntests\\test_authorization.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\authorization_page.py:29: in set_email\n    self.set_value(AuthorizationLocators.EMAIL_PHONE_FIELD, first)\nbase\\base_object.py:20: in set_value\n    self.is_clickable(locator).send_keys(value)\nbase\\base_object.py:14: in is_clickable\n    return self.wait.until(ec.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"75000cde5b7f43da1cc9eda9f9e9e884\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000013842529630>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "steps": [{"name": "clicking to \"Login\" button", "status": "passed", "start": 1689222349977, "stop": 1689222366818}, {"name": "clicking to \"Login with password\" button", "status": "passed", "start": 1689222366818, "stop": 1689222368065}, {"name": "set up email", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\Owner\\PycharmProjects\\LifeHelp\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Owner\\PycharmProjects\\LifeHelp\\pages\\authorization_page.py\", line 29, in set_email\n    self.set_value(AuthorizationLocators.EMAIL_PHONE_FIELD, first)\n  File \"C:\\Users\\Owner\\PycharmProjects\\LifeHelp\\base\\base_object.py\", line 20, in set_value\n    self.is_clickable(locator).send_keys(value)\n  File \"C:\\Users\\Owner\\PycharmProjects\\LifeHelp\\base\\base_object.py\", line 14, in is_clickable\n    return self.wait.until(ec.element_to_be_clickable(locator))\n  File \"C:\\Users\\Owner\\PycharmProjects\\LifeHelp\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "parameters": [{"name": "first", "value": "'89520476828'"}], "start": 1689222368065, "stop": 1689222374080}], "parameters": [{"name": "first", "value": "'89520476828'"}, {"name": "second", "value": "'lifehelp1@'"}, {"name": "third", "value": "'https://life-help.ru/doctor/sessions'"}], "start": 1689222349976, "stop": 1689222374115, "uuid": "aebdced6-ebf8-42b0-bd46-5530dd0a1eb8", "historyId": "063c3b3b6fab4c96fced2b56cc53efcf", "testCaseId": "a028d93313ce349bc1d2f8b740c48a2f", "fullName": "tests.test_authorization#test_authorization", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_authorization"}, {"name": "host", "value": "DESKTOP-MNCDD93"}, {"name": "thread", "value": "13648-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_authorization"}]}