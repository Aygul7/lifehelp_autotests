{"name": "test_registrations_error_messages[missing_symbol_password]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom no such execution context: loader has changed while resolving nodes\n  (Session info: chrome=116.0.5845.188)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF7CEF83E62+57250]\n\t(No symbol) [0x00007FF7CEEFBC02]\n\t(No symbol) [0x00007FF7CEDCE0BB]\n\t(No symbol) [0x00007FF7CEDD162C]\n\t(No symbol) [0x00007FF7CEDD3A4F]\n\t(No symbol) [0x00007FF7CEDD3B40]\n\t(No symbol) [0x00007FF7CEE2F6DA]\n\t(No symbol) [0x00007FF7CEE2DD50]\n\t(No symbol) [0x00007FF7CEE26583]\n\t(No symbol) [0x00007FF7CEDFCC71]\n\t(No symbol) [0x00007FF7CEDFDE54]\n\tGetHandleVerifier [0x00007FF7CF234CF2+2879026]\n\tGetHandleVerifier [0x00007FF7CF286F30+3215472]\n\tGetHandleVerifier [0x00007FF7CF27FD4F+3186319]\n\tGetHandleVerifier [0x00007FF7CF015505+652869]\n\t(No symbol) [0x00007FF7CEF07518]\n\t(No symbol) [0x00007FF7CEF035F4]\n\t(No symbol) [0x00007FF7CEF036EC]\n\t(No symbol) [0x00007FF7CEEF38E3]\n\tBaseThreadInitThunk [0x00007FF8DED07344+20]\n\tRtlUserThreadStart [0x00007FF8E0CE26B1+33]", "trace": "get_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x000001FC4988E140>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options):\n        options = get_chrome_options\n        # s = Service('C:/Users/WebDriver/bin/chromedriver.exe')\n        # driver = webdriver.Chrome(service=s)\n>       driver = webdriver.Chrome(executable_path=r\"C:/WebDriver/bin/chromedriver.exe\")\n\nconftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:80: in __init__\n    super().__init__(\nvenv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:104: in __init__\n    super().__init__(\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:286: in __init__\n    self.start_session(capabilities, browser_profile)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:378: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FC49927550>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom no such execut...07FF7CEEF38E3]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8DED07344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8E0CE26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from no such execution context: loader has changed while resolving nodes\nE         (Session info: chrome=116.0.5845.188)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF7CEF83E62+57250]\nE       \t(No symbol) [0x00007FF7CEEFBC02]\nE       \t(No symbol) [0x00007FF7CEDCE0BB]\nE       \t(No symbol) [0x00007FF7CEDD162C]\nE       \t(No symbol) [0x00007FF7CEDD3A4F]\nE       \t(No symbol) [0x00007FF7CEDD3B40]\nE       \t(No symbol) [0x00007FF7CEE2F6DA]\nE       \t(No symbol) [0x00007FF7CEE2DD50]\nE       \t(No symbol) [0x00007FF7CEE26583]\nE       \t(No symbol) [0x00007FF7CEDFCC71]\nE       \t(No symbol) [0x00007FF7CEDFDE54]\nE       \tGetHandleVerifier [0x00007FF7CF234CF2+2879026]\nE       \tGetHandleVerifier [0x00007FF7CF286F30+3215472]\nE       \tGetHandleVerifier [0x00007FF7CF27FD4F+3186319]\nE       \tGetHandleVerifier [0x00007FF7CF015505+652869]\nE       \t(No symbol) [0x00007FF7CEF07518]\nE       \t(No symbol) [0x00007FF7CEF035F4]\nE       \t(No symbol) [0x00007FF7CEF036EC]\nE       \t(No symbol) [0x00007FF7CEEF38E3]\nE       \tBaseThreadInitThunk [0x00007FF8DED07344+20]\nE       \tRtlUserThreadStart [0x00007FF8E0CE26B1+33]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: SessionNotCreatedException"}, "parameters": [{"name": "first", "value": "'aigul.shafigullina@yandex.ru'"}, {"name": "second", "value": "'lifehelp1'"}, {"name": "third", "value": "'lifehelp1'"}, {"name": "fourth", "value": "'Пароль должен содержать хотя бы один из символов: !?@#$%&*'"}], "start": 1695193506002, "stop": 1695193506002, "uuid": "36755784-a152-473d-a674-ac0efbe7f208", "historyId": "64992802617597744f38d64a28d9a004", "testCaseId": "01609061ad681f07a7f52b36ebc3800e", "fullName": "tests.test_authorization#test_registrations_error_messages", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_authorization"}, {"name": "host", "value": "DESKTOP-MNCDD93"}, {"name": "thread", "value": "12416-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_authorization"}]}