{"name": "test_logo_redirect", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "authorization_page = <pages.authorization_page.AuthorizationPage object at 0x0000026699966E90>\n\n    def test_logo_redirect(authorization_page):\n        authorization_page.click_to_login_button()\n        authorization_page.click_to_login_w_password_button()\n        authorization_page.set_email_email()\n        authorization_page.set_password_pass()\n        authorization_page.click_to_authorize_button()\n        authorization_page.click_logo_btn()\n>       authorization_page.get_url('https://life-help.ru/')\n\ntests\\test_authorization.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase\\base_object.py:29: in get_url\n    return self.wait.until(ec.url_to_be(url))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5e60ed497d2c429ab49f22d4cf6c3a27\")>\nmethod = <function url_to_be.<locals>._predicate at 0x00000266998D1510>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "steps": [{"name": "clicking to \"Login\" button", "status": "passed", "start": 1692598577064, "stop": 1692598581273}, {"name": "clicking to \"Login with password\" button", "status": "passed", "start": 1692598581273, "stop": 1692598581738}, {"name": "set up password", "status": "passed", "start": 1692598582541, "stop": 1692598582979}, {"name": "clicking to \"Authorize\" button", "status": "passed", "start": 1692598582980, "stop": 1692598583220}, {"name": "click logo button", "status": "passed", "start": 1692598583221, "stop": 1692598588010}], "start": 1692598577063, "stop": 1692598593499, "uuid": "9b0261ce-0edb-42d5-83f1-0797ff4667c8", "historyId": "a9406bbe292465651fd473cc23aa9bd8", "testCaseId": "572a304c2d81b9cd4b1aefc9c8ac892a", "fullName": "tests.test_authorization#test_logo_redirect", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_authorization"}, {"name": "host", "value": "DESKTOP-MNCDD93"}, {"name": "thread", "value": "30304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_authorization"}]}