{"name": "test_create_aim_psychologist", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "authorization_page = <pages.authorization_page.AuthorizationPage object at 0x00000208DC071C90>\n\n    def test_create_aim_psychologist(authorization_page):\n        authorization_page.click_to_login_button()\n        authorization_page.click_to_login_w_password_button()\n>       authorization_page.set_email_psychologist()\n\ntests\\test_authorization.py:503: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\authorization_page.py:37: in set_email_psychologist\n    self.set_value(AuthorizationLocators.EMAIL_PHONE_FIELD, '89520476828')\nbase\\base_object.py:20: in set_value\n    self.is_clickable(locator).send_keys(value)\nbase\\base_object.py:14: in is_clickable\n    return self.wait.until(ec.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4c160be2902354fecffc05073acaaf52\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000208DB686830>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "steps": [{"name": "clicking to \"Login\" button", "status": "passed", "start": 1689918407205, "stop": 1689918410560}, {"name": "clicking to \"Login with password\" button", "status": "passed", "start": 1689918410560, "stop": 1689918410783}], "start": 1689918407205, "stop": 1689918415866, "uuid": "7a104028-fa1e-415b-b9c8-5a276847837f", "historyId": "433ad808c381eb4345eb4553c6505def", "testCaseId": "fbe9c81eddfab88b79096636cb0e514a", "fullName": "tests.test_authorization#test_create_aim_psychologist", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_authorization"}, {"name": "host", "value": "DESKTOP-MNCDD93"}, {"name": "thread", "value": "16244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_authorization"}]}